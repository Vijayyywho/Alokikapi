generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://vijayyywho:database@cluster0.8xxz0.mongodb.net/alokik?retryWrites=true&w=majority&appName=Cluster0"
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  amenities  Json        @default("{}")  // Ensure it defaults to an empty JSON object if not provided
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail? @relation("PostDetailPost")
  savedPosts SavedPost[]
  reviews    Review[]    // New relation field for reviews
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  included   String[]   // Or JSON, or another data type depending on your schema
  excluded   String[]   // Or JSON, or another data type depending on your schema
  amenities  Json       @default("{}")  // Ensure it defaults to an empty JSON object if not provided
  post       Post       @relation("PostDetailPost", fields: [postId], references: [id])
  postId     String     @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])  
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  createdAt  DateTime    @default(now())
  posts      Post[]
  savedPosts SavedPost[]
  chats      Chat[]      @relation(fields: [chatIDs], references: [id])
  chatIDs    String[]    @db.ObjectId
  reviews    Review[]    // Reverse relation to Review
}


model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  users     User[]    @relation(fields: [userIDs], references: [id])
  userIDs   String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  seenBy    String[]  @db.ObjectId
  messages  Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Temple {
   id   String   @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  imgUrl  String
  dec  String?
}
model Beaches {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  urls        String[] // Array of strings for multiple URLs
  longitude   Float    // Longitude as a separate field
  latitude    Float    // Latitude as a separate field
  activities  String[] // Array of strings for the activities
}


model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String   // Review text
  stars     Int      // Rating (1-5)
  avatar    String?  // Optional avatar for the reviewer
  username  String   // Reviewer's username
  postId    String   @db.ObjectId  // Link to the post being reviewed
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId  // Link to the user who created the review
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())  // Date when the review was created
}
